apply plugin: 'jacoco'

def fileFilter = [
        '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$[0-9].*',
]
def mainSrc = "$project.projectDir/src/main/kotlin"
def configDir = "${project.rootDir}/config"
def reportDir = "${project.buildDir}/reports"
jacoco.toolVersion = "0.8.4"

def MINIMUM_COVERAGE = 0.60     // The minimum code-coverage percentage

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

project.afterEvaluate {
    def productFlavors = android.productFlavors.collect { flavor ->
        flavor.name
    }
    if (!productFlavors) productFlavors.add('')

    //iterate over the flavors

    productFlavors.each {

        productFlavorName ->
            def sourceName, sourcePath
            def buildTypeName = 'debug'

            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }

            def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/${sourceName}", excludes: fileFilter)
            def testTaskName = "test${sourceName.capitalize()}UnitTest"
            def coverageReportTaskName = "create${sourceName.capitalize()}CoverageReport"
            task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: ["${testTaskName}", "${coverageReportTaskName}"]) {
                group = 'Reporting'
                reports {
                    xml.enabled = true
                    html.enabled = true
                }

                sourceDirectories = files([mainSrc])
                classDirectories = files([debugTree])
                executionData = fileTree(dir: project.buildDir, includes: [
                        "jacoco/${testTaskName}.exec", "outputs/code_coverage/${sourceName}AndroidTest/connected/*coverage.ec"
                ])
            }

            task "${testTaskName}CoverageVerification"(type: JacocoCoverageVerification, dependsOn: "${testTaskName}Coverage") {
                group = 'Verification'
                sourceDirectories = files([mainSrc])
                classDirectories = files([debugTree])
                executionData = fileTree(dir: project.buildDir, includes: [
                        "jacoco/${testTaskName}.exec", "outputs/code_coverage/${sourceName}AndroidTest/connected/*coverage.ec"
                ])
                violationRules {
                    failOnViolation = true
                    rule {
                        limit {
                            minimum = MINIMUM_COVERAGE
                        }
                    }
                }
            }

    }
}